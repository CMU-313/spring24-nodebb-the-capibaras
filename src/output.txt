Function call: RuntimeEvent {
  type: 2,
  category: 23,
  hash: 5,
  indent: 1,
  node: null,
  location: null,
  instance: Stage {
    input: 'function add(a,b) {\n return a + b   \n}\nconsole.log(add(1,2))',
    key: '$$STx1',
    links: {
      '$DEBUG_PROGRAM': [Object],
      '$DEBUG_FUNCTION_RETURN': [Object],
      '$DEBUG_FUNCTION_CALL': [Object],
      '$DEBUG_FUNCTION_CALL_END': [Object],
      '$DEBUG_FUNCTION_ENTER': [Object],
      '$DEBUG_FUNCTION_LEAVE': [Object],
      '$DEBUG_LOOP_TEST': [Object],
      '$DEBUG_LOOP_ENTER': [Object],
      '$DEBUG_LOOP_LEAVE': [Object],
      '$DEBUG_BREAK': [Object],
      '$DEBUG_CONTINUE': [Object],
      '$DEBUG_SWITCH_TEST': [Object],
      '$DEBUG_SWITCH_ENTER': [Object],
      '$DEBUG_SWITCH_LEAVE': [Object],
      '$DEBUG_CASE_TEST': [Object],
      '$DEBUG_CASE_ENTER': [Object],
      '$DEBUG_CASE_LEAVE': [Object],
      '$DEBUG_IF_TEST': [Object],
      '$DEBUG_IF_ENTER': [Object],
      '$DEBUG_IF_LEAVE': [Object],
      '$DEBUG_ELSE_ENTER': [Object],
      '$DEBUG_ELSE_LEAVE': [Object],
      '$DEBUG_VAR_INIT': [Object],
      '$DEBUG_VAR_DECLARE': [Object],
      '$DEBUG_OP_NEW': [Object],
      '$DEBUG_OP_NEW_END': [Object],
      '$DEBUG_UNARY': [Object],
      '$DEBUG_UPDATE': [Object],
      '$DEBUG_SUPER': [Object],
      '$DEBUG_THIS': [Object],
      '$DEBUG_LITERAL': [Object],
      '$DEBUG_IDENTIFIER': [Object],
      '$DEBUG_BINARY': [Object],
      '$DEBUG_LOGICAL': [Object],
      '$DEBUG_TERNARY': [Object],
      '$DEBUG_ASSIGN': [Object],
      '$DEBUG_METHOD_ENTER': [Object],
      '$DEBUG_METHOD_LEAVE': [Object],
      '$DEBUG_TRY_ENTER': [Object],
      '$DEBUG_TRY_LEAVE': [Object],
      '$DEBUG_CATCH_ENTER': [Object],
      '$DEBUG_CATCH_LEAVE': [Object],
      '$DEBUG_FINAL_ENTER': [Object],
      '$DEBUG_FINAL_LEAVE': [Object],
      '$DEBUG_ALLOC': [Object],
      '$DEBUG_MEMBER_EXPR': [Object],
      '$DEBUG_BLOCK_ENTER': [Object],
      '$DEBUG_BLOCK_LEAVE': [Object],
      '$DEBUG_PROGRAM_FRAME_VALUE': [Object],
      '$DEBUG_PROGRAM_ENTER': [Object],
      '$DEBUG_PROGRAM_LEAVE': [Object]
    },
    nodes: {
      '1': [Object],
      '2': [Object],
      '3': [Object],
      '4': [Object],
      '5': [Object],
      '6': [Object],
      '7': [Object],
      '8': [Object],
      '9': [Object]
    },
    symbols: { add: [Object] },
    options: {},
    indent: 1,
    frame: Frame {
      uid: 3,
      hash: 0,
      type: 0,
      isSloppy: false,
      isBreakable: false,
      isReturnable: false,
      isCatchClause: false,
      isFinalClause: false,
      isTryStatement: false,
      isSwitchDefault: false,
      isInstantiation: false,
      cleanType: 'PROGRAM',
      parent: null,
      values: [],
      children: [],
      isSwitchCase: false,
      isContinuable: false
    },
    '$$frameHash': 0,
    currentScope: null,
    previousScope: null,
    listeners: {
      '0': [],
      '1': [],
      '2': [],
      '3': [],
      '4': [],
      '5': [],
      '6': [],
      '7': [],
      '8': [],
      '9': [],
      '10': [],
      '11': [],
      '12': [],
      '13': [],
      '14': [],
      '15': [],
      '16': [],
      '17': [],
      '18': [],
      '19': [],
      '20': [],
      '21': [],
      '22': [],
      '23': [Array],
      '24': [],
      '25': [],
      '26': [],
      '27': [],
      '28': []
    },
    '$0': undefined,
    '$1': [Function: DEBUG_FUNCTION_RETURN],
    '$2': [Function: DEBUG_FUNCTION_CALL],
    '$3': undefined,
    '$4': [Function: DEBUG_FUNCTION_ENTER],
    '$5': [Function: DEBUG_FUNCTION_LEAVE],
    '$6': [Function: DEBUG_LOOP_TEST],
    '$7': [Function: DEBUG_LOOP_ENTER],
    '$8': [Function: DEBUG_LOOP_LEAVE],
    '$9': [Function: DEBUG_BREAK],
    '$10': [Function: DEBUG_CONTINUE],
    '$11': [Function: DEBUG_SWITCH_TEST],
    '$12': [Function: DEBUG_SWITCH_ENTER],
    '$13': [Function: DEBUG_SWITCH_LEAVE],
    '$14': [Function: DEBUG_CASE_TEST],
    '$15': [Function: DEBUG_CASE_ENTER],
    '$16': [Function: DEBUG_CASE_LEAVE],
    '$17': [Function: DEBUG_IF_TEST],
    '$18': [Function: DEBUG_IF_ENTER],
    '$19': [Function: DEBUG_IF_LEAVE],
    '$20': [Function: DEBUG_ELSE_ENTER],
    '$21': [Function: DEBUG_ELSE_LEAVE],
    '$22': [Function: DEBUG_VAR_INIT],
    '$23': [Function: DEBUG_VAR_DECLARE],
    '$24': [Function: DEBUG_OP_NEW],
    '$25': [Function: DEBUG_OP_NEW_END],
    '$26': [Function: DEBUG_UNARY],
    '$27': [Function: DEBUG_UPDATE],
    '$28': [Function: DEBUG_SUPER],
    '$29': [Function: DEBUG_THIS],
    '$30': [Function: DEBUG_LITERAL],
    '$31': undefined,
    '$32': [Function: DEBUG_BINARY],
    '$33': [Function: DEBUG_LOGICAL],
    '$34': [Function: DEBUG_TERNARY],
    '$35': [Function: DEBUG_ASSIGN],
    '$36': [Function: DEBUG_METHOD_ENTER],
    '$37': [Function: DEBUG_METHOD_LEAVE],
    '$38': [Function: DEBUG_TRY_ENTER],
    '$39': [Function: DEBUG_TRY_LEAVE],
    '$40': [Function: DEBUG_CATCH_ENTER],
    '$41': [Function: DEBUG_CATCH_LEAVE],
    '$42': [Function: DEBUG_FINAL_ENTER],
    '$43': [Function: DEBUG_FINAL_LEAVE],
    '$44': [Function: DEBUG_ALLOC],
    '$45': [Function: DEBUG_MEMBER_EXPR],
    '$46': [Function: DEBUG_BLOCK_ENTER],
    '$47': [Function: DEBUG_BLOCK_LEAVE],
    '$48': [Function: DEBUG_PROGRAM_FRAME_VALUE],
    '$49': [Function: DEBUG_PROGRAM_ENTER],
    '$50': [Function: DEBUG_PROGRAM_LEAVE],
    script: 'const $$STx1 = Iroh.stages["$$STx1"];\n' +
      'var $$frameValue = void 0;\n' +
      '$$STx1.$49(7)\n' +
      'function add(a, b) {\n' +
      '  $$STx1.$4(8, this, add, arguments);\n' +
      '  return $$STx1.$1(1, "add", $$STx1.$32(9, 1, a, b));\n' +
      '  $$STx1.$5(8, this);\n' +
      '}\n' +
      '$$STx1.$48($$frameValue = $$STx1.$2(6, this, $$STx1.$45(2, console, "log"), "log", [$$STx1.$2(5, this, add, null, [$$STx1.$30(3, 1), $$STx1.$30(4, 2)])]));\n' +
      '$$STx1.$50(7, $$frameValue)\n'
  },
  context: {},
  object: null,
  callee: null,
  name: 'add',
  call: [Function: add],
  arguments: [ 1, 2 ],
  external: false
}
Function call: RuntimeEvent {
  type: 2,
  category: 23,
  hash: 6,
  indent: 1,
  node: null,
  location: null,
  instance: Stage {
    input: 'function add(a,b) {\n return a + b   \n}\nconsole.log(add(1,2))',
    key: '$$STx1',
    links: {
      '$DEBUG_PROGRAM': [Object],
      '$DEBUG_FUNCTION_RETURN': [Object],
      '$DEBUG_FUNCTION_CALL': [Object],
      '$DEBUG_FUNCTION_CALL_END': [Object],
      '$DEBUG_FUNCTION_ENTER': [Object],
      '$DEBUG_FUNCTION_LEAVE': [Object],
      '$DEBUG_LOOP_TEST': [Object],
      '$DEBUG_LOOP_ENTER': [Object],
      '$DEBUG_LOOP_LEAVE': [Object],
      '$DEBUG_BREAK': [Object],
      '$DEBUG_CONTINUE': [Object],
      '$DEBUG_SWITCH_TEST': [Object],
      '$DEBUG_SWITCH_ENTER': [Object],
      '$DEBUG_SWITCH_LEAVE': [Object],
      '$DEBUG_CASE_TEST': [Object],
      '$DEBUG_CASE_ENTER': [Object],
      '$DEBUG_CASE_LEAVE': [Object],
      '$DEBUG_IF_TEST': [Object],
      '$DEBUG_IF_ENTER': [Object],
      '$DEBUG_IF_LEAVE': [Object],
      '$DEBUG_ELSE_ENTER': [Object],
      '$DEBUG_ELSE_LEAVE': [Object],
      '$DEBUG_VAR_INIT': [Object],
      '$DEBUG_VAR_DECLARE': [Object],
      '$DEBUG_OP_NEW': [Object],
      '$DEBUG_OP_NEW_END': [Object],
      '$DEBUG_UNARY': [Object],
      '$DEBUG_UPDATE': [Object],
      '$DEBUG_SUPER': [Object],
      '$DEBUG_THIS': [Object],
      '$DEBUG_LITERAL': [Object],
      '$DEBUG_IDENTIFIER': [Object],
      '$DEBUG_BINARY': [Object],
      '$DEBUG_LOGICAL': [Object],
      '$DEBUG_TERNARY': [Object],
      '$DEBUG_ASSIGN': [Object],
      '$DEBUG_METHOD_ENTER': [Object],
      '$DEBUG_METHOD_LEAVE': [Object],
      '$DEBUG_TRY_ENTER': [Object],
      '$DEBUG_TRY_LEAVE': [Object],
      '$DEBUG_CATCH_ENTER': [Object],
      '$DEBUG_CATCH_LEAVE': [Object],
      '$DEBUG_FINAL_ENTER': [Object],
      '$DEBUG_FINAL_LEAVE': [Object],
      '$DEBUG_ALLOC': [Object],
      '$DEBUG_MEMBER_EXPR': [Object],
      '$DEBUG_BLOCK_ENTER': [Object],
      '$DEBUG_BLOCK_LEAVE': [Object],
      '$DEBUG_PROGRAM_FRAME_VALUE': [Object],
      '$DEBUG_PROGRAM_ENTER': [Object],
      '$DEBUG_PROGRAM_LEAVE': [Object]
    },
    nodes: {
      '1': [Object],
      '2': [Object],
      '3': [Object],
      '4': [Object],
      '5': [Object],
      '6': [Object],
      '7': [Object],
      '8': [Object],
      '9': [Object]
    },
    symbols: { add: [Object] },
    options: {},
    indent: 1,
    frame: Frame {
      uid: 3,
      hash: 0,
      type: 0,
      isSloppy: false,
      isBreakable: false,
      isReturnable: false,
      isCatchClause: false,
      isFinalClause: false,
      isTryStatement: false,
      isSwitchDefault: false,
      isInstantiation: false,
      cleanType: 'PROGRAM',
      parent: null,
      values: [],
      children: [],
      isSwitchCase: false,
      isContinuable: false
    },
    '$$frameHash': 0,
    currentScope: null,
    previousScope: null,
    listeners: {
      '0': [],
      '1': [],
      '2': [],
      '3': [],
      '4': [],
      '5': [],
      '6': [],
      '7': [],
      '8': [],
      '9': [],
      '10': [],
      '11': [],
      '12': [],
      '13': [],
      '14': [],
      '15': [],
      '16': [],
      '17': [],
      '18': [],
      '19': [],
      '20': [],
      '21': [],
      '22': [],
      '23': [Array],
      '24': [],
      '25': [],
      '26': [],
      '27': [],
      '28': []
    },
    '$0': undefined,
    '$1': [Function: DEBUG_FUNCTION_RETURN],
    '$2': [Function: DEBUG_FUNCTION_CALL],
    '$3': undefined,
    '$4': [Function: DEBUG_FUNCTION_ENTER],
    '$5': [Function: DEBUG_FUNCTION_LEAVE],
    '$6': [Function: DEBUG_LOOP_TEST],
    '$7': [Function: DEBUG_LOOP_ENTER],
    '$8': [Function: DEBUG_LOOP_LEAVE],
    '$9': [Function: DEBUG_BREAK],
    '$10': [Function: DEBUG_CONTINUE],
    '$11': [Function: DEBUG_SWITCH_TEST],
    '$12': [Function: DEBUG_SWITCH_ENTER],
    '$13': [Function: DEBUG_SWITCH_LEAVE],
    '$14': [Function: DEBUG_CASE_TEST],
    '$15': [Function: DEBUG_CASE_ENTER],
    '$16': [Function: DEBUG_CASE_LEAVE],
    '$17': [Function: DEBUG_IF_TEST],
    '$18': [Function: DEBUG_IF_ENTER],
    '$19': [Function: DEBUG_IF_LEAVE],
    '$20': [Function: DEBUG_ELSE_ENTER],
    '$21': [Function: DEBUG_ELSE_LEAVE],
    '$22': [Function: DEBUG_VAR_INIT],
    '$23': [Function: DEBUG_VAR_DECLARE],
    '$24': [Function: DEBUG_OP_NEW],
    '$25': [Function: DEBUG_OP_NEW_END],
    '$26': [Function: DEBUG_UNARY],
    '$27': [Function: DEBUG_UPDATE],
    '$28': [Function: DEBUG_SUPER],
    '$29': [Function: DEBUG_THIS],
    '$30': [Function: DEBUG_LITERAL],
    '$31': undefined,
    '$32': [Function: DEBUG_BINARY],
    '$33': [Function: DEBUG_LOGICAL],
    '$34': [Function: DEBUG_TERNARY],
    '$35': [Function: DEBUG_ASSIGN],
    '$36': [Function: DEBUG_METHOD_ENTER],
    '$37': [Function: DEBUG_METHOD_LEAVE],
    '$38': [Function: DEBUG_TRY_ENTER],
    '$39': [Function: DEBUG_TRY_LEAVE],
    '$40': [Function: DEBUG_CATCH_ENTER],
    '$41': [Function: DEBUG_CATCH_LEAVE],
    '$42': [Function: DEBUG_FINAL_ENTER],
    '$43': [Function: DEBUG_FINAL_LEAVE],
    '$44': [Function: DEBUG_ALLOC],
    '$45': [Function: DEBUG_MEMBER_EXPR],
    '$46': [Function: DEBUG_BLOCK_ENTER],
    '$47': [Function: DEBUG_BLOCK_LEAVE],
    '$48': [Function: DEBUG_PROGRAM_FRAME_VALUE],
    '$49': [Function: DEBUG_PROGRAM_ENTER],
    '$50': [Function: DEBUG_PROGRAM_LEAVE],
    script: 'const $$STx1 = Iroh.stages["$$STx1"];\n' +
      'var $$frameValue = void 0;\n' +
      '$$STx1.$49(7)\n' +
      'function add(a, b) {\n' +
      '  $$STx1.$4(8, this, add, arguments);\n' +
      '  return $$STx1.$1(1, "add", $$STx1.$32(9, 1, a, b));\n' +
      '  $$STx1.$5(8, this);\n' +
      '}\n' +
      '$$STx1.$48($$frameValue = $$STx1.$2(6, this, $$STx1.$45(2, console, "log"), "log", [$$STx1.$2(5, this, add, null, [$$STx1.$30(3, 1), $$STx1.$30(4, 2)])]));\n' +
      '$$STx1.$50(7, $$frameValue)\n'
  },
  context: {},
  object: Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context],
    createTask: [Function: createTask]
  },
  callee: 'log',
  name: 'log',
  call: [Function: log],
  arguments: [ 3 ],
  external: true
}
3
